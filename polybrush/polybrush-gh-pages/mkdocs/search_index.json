{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolybrush\n brings several exciting level design tools to the Unity editor:  \nMesh Sculpting\n, \nVertex Color Painting\n, and \nTexture Blending\n.\n\n\nDirectly in the editor you can sculpt complex shapes, paint in custom lighting or coloring, and blend textures across meshes.\n\n\nPolybrush\n is a natural extension of Unity\u2019s famous \"what you see is what you get\" workflow, and is even compatible with \nProBuilder\n meshes for the complete in-editor level design solution.\n\n\n\n\nGetting Started\n\n\n\n\nImportant!\n\n\nPolybrush\n is for working with \nmeshes\n, not \nterrain\n.  Use the Unity Terrain tool for modeling terrains.\n\n\n\n\nIf you're just getting started with \nPolybrush\n, the \nQuick Start\n tutorial is a great way to begin.\n\n\nFor further learning, browse the topic links to the left. If you prefer video tutorials, we've got you covered- every section has a complete video summary.\n\n\nI Need Help!\n\n\nIf you've encountered a bug or other technical issue, please post on the official \nSupport Forum\n. We respond very quickly, and the community benefits as well.\n\n\nFor general questions, comments, etc, feel free to \nemail\n us directly.\n\n\nOptional Extras\n\n\nLeave a Review\n\n\nIf you like what we are creating, and want to support further development and new ideas, reviews are the single best way to help- thanks very much!\n\nWrite a Review for Polybrush\n\n\nRegister your Purchase\n\n\nOptionally, you can \"Register\" to gain access to our User Toolbox page, where you can access direct download links for all your ProCore purchases.\n\n\nSimple send us an \nemail\n with your original Unity Asset Store reciept (the one with the \"OR302...\" number), and we'll setup your account, usually within 24 hours.\n\n\nStay Informed\n\n\nIf you'd like to keep up-to-date with new tools, contests, sales, and any other news, we have a few options:\n\n\n\n\nTwitter : \n@probuilder3d\n\n\nFacebook: \nfacebook.com/probuilder3d\n\n\nNews Page \n Newsletter: \nprocore3d.com/news\n\n\n\n\n\n\nSpecial Thanks to:\n\n\n\n\n\n\n\n\n\nExample Textures generously provided by \ngametextures.com", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Important!  Polybrush  is for working with  meshes , not  terrain .  Use the Unity Terrain tool for modeling terrains.  If you're just getting started with  Polybrush , the  Quick Start  tutorial is a great way to begin.  For further learning, browse the topic links to the left. If you prefer video tutorials, we've got you covered- every section has a complete video summary.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#i-need-help", 
            "text": "If you've encountered a bug or other technical issue, please post on the official  Support Forum . We respond very quickly, and the community benefits as well.  For general questions, comments, etc, feel free to  email  us directly.", 
            "title": "I Need Help!"
        }, 
        {
            "location": "/#optional-extras", 
            "text": "", 
            "title": "Optional Extras"
        }, 
        {
            "location": "/#leave-a-review", 
            "text": "If you like what we are creating, and want to support further development and new ideas, reviews are the single best way to help- thanks very much! Write a Review for Polybrush", 
            "title": "Leave a Review"
        }, 
        {
            "location": "/#register-your-purchase", 
            "text": "Optionally, you can \"Register\" to gain access to our User Toolbox page, where you can access direct download links for all your ProCore purchases.  Simple send us an  email  with your original Unity Asset Store reciept (the one with the \"OR302...\" number), and we'll setup your account, usually within 24 hours.", 
            "title": "Register your Purchase"
        }, 
        {
            "location": "/#stay-informed", 
            "text": "If you'd like to keep up-to-date with new tools, contests, sales, and any other news, we have a few options:   Twitter :  @probuilder3d  Facebook:  facebook.com/probuilder3d  News Page   Newsletter:  procore3d.com/news", 
            "title": "Stay Informed"
        }, 
        {
            "location": "/#special-thanks-to", 
            "text": "Example Textures generously provided by  gametextures.com", 
            "title": "Special Thanks to:"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Getting Started With Polybrush\n\n\n\n\nComplete Video: \nGetting Started With Polybrush\n\n\n\n\n\nFirst time using Polybrush?  Start here for a quick and pain-free overview of the essentials, plus links to more advanced learning.\n\n\nQuestions or Concerns?\n  Please let us know via \nemail\n or on the \nforum\n.  We'll be happy to help!\n\n\n\n\n1) Open the Polybrush Window\n\n\n\nQuick Video: \nThe Polybrush Window\n\n\n\n\n\nFrom the Unity menu bar, choose \nTools \n Polybrush \n Polybrush Window\n. This opens the \nPolybrush Window\n, which you will use for 99% of \nPolybrush\n functionality.\n\n\n\n\n\n\n\n\n\n\n\n2) Choose a Mesh to Edit\n\n\n\nQuick Video: \nChoosing a Mesh to Edit\n\n\n\n\n\nPolybrush\n will automatically work on any mesh, but for now we'll use a Unity primitve mesh.\n\n\nTo create a sphere primitive, in the Unity menu bar choose \nGame Object \n 3D Object \n Sphere\n\n\n\n\n\n\n\n\n\n\n\nYou can also use \nProBuilder\n meshes for an even more powerful workflow!\n\n\n\n\n\n\n3) Sculpt Your Mesh\n\n\n\nQuick Video: \nMesh Sculpting and Smoothing\n\n\n\n\n\nLet's make this sphere look more interesting!\n\n\n\n\nThe default Unity sphere is only 1 meter across, so let's scale it up about 10x.\n\n\nActivate \nPush / Pull Mode\n by clicking it's icon (\n) in the \nMode Toolbar\n.\n\n\nHover your mouse over the Sphere, and \nLeft Click\n to \"pull\", \nShift Left Click\n to \"push\" geometry.\n\n\nTo smooth out hard edges, activate \nSmoothing Mode\n (\n) and brush the mesh with \nLeft Click\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n4) Paint Pretty Colors\n\n\n\nQuick Video: \nPainting Vertex Colors\n\n\n\n\n\nDanger, Danger! The default Unity material won't show \nVertex Coloring\n, so let's create a new material that will:\n\n\n\n\nIn your Project Panel, right-click and choose \nCreate \n Material\n, then give it a really cool name\n\n\nWith the new material selected, look at the top of the Inspector Panel- see that drop-down labeled \"Shader\"?  Click it, and choose \nPolybrush \n Standard Vertex Color\n\n\nApply this material to the mesh you'd like to paint\n\n\n\n\n\n\nHey custom shader people! You can use \nany\n shader, as long as it supports vertex colors\n\n\n\n\nNow we're ready to paint vertex colors:\n\n\n\n\nActivate \nColor Painting Mode\n by clicking it's icon (\n) in the \nMode Toolbar\n.\n\n\nClick to select a color from the \nColor Palette\n buttons at the bottom of the \nPolybrush Panel\n.\n\n\nHover your mouse over the Sphere, and \nLeft Click\n to paint, \nShift Left Click\n to erase.\n\n\n\n\n\n\n\n\n\n\n\n\n\n5) Blend Fancy Textures\n\n\n\nQuick Video: \nTexture Blending\n\n\n\n\n\nTexture Blending\n requires a special shader- you can create your own, or use ours:\n\n\n\n\nIn your Project Panel, right-click and choose \nCreate \n Material\n.\n\n\nWith the new material selected, look at the top of the Inspector Panel- see that drop-down labeled \"Shader\"? Click it, and choose \nPolybrush \n Standard Texture Blend\n.\n\n\nApply this material to the mesh you'd like to paint.\n\n\n\n\n\n\nPrefer your custom shader? You can use \nany\n shader with Polybrush - see \nWriting Texture Blend Shaders\n for more information.\n\n\n\n\nWe can now paint and blend textures on the mesh:\n\n\n\n\nActivate \nTexture Blending Mode\n by clicking it's icon (\n) in the \nMode Toolbar\n.\n\n\nClick on a texture in the bottom of the \nPolybrush Panel\n to select it.\n\n\nHover your mouse over the Sphere, and \nLeft Click\n to paint, \nShift Left Click\n to erase the selected texture.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTextures kindly provided by \ngametextures.com\n\n\n\n\n\n\nSummary\n\n\nCongratulations, you've learned the essentials of Polybrush!  You may now \nChoose Your Own Path:\n\n\nThe Path of Adventure and Dubious Wisdom:\n\n\nJump right in and learn the rest as you go.  You can always return to these docs or ask us if you have specific questions.  Enjoy!\n\n\nThe Path of Infinite Wisdom:\n\n\nUse the handy-dandy topic links (on your left) to jump quickly through these docs.  Whether you skim, read in-depth, or just watch video tutorials, you'll be lvl60 in no time.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quickstart/#1-open-the-polybrush-window", 
            "text": "Quick Video:  The Polybrush Window   From the Unity menu bar, choose  Tools   Polybrush   Polybrush Window . This opens the  Polybrush Window , which you will use for 99% of  Polybrush  functionality.", 
            "title": "1) Open the Polybrush Window"
        }, 
        {
            "location": "/quickstart/#2-choose-a-mesh-to-edit", 
            "text": "Quick Video:  Choosing a Mesh to Edit   Polybrush  will automatically work on any mesh, but for now we'll use a Unity primitve mesh.  To create a sphere primitive, in the Unity menu bar choose  Game Object   3D Object   Sphere      You can also use  ProBuilder  meshes for an even more powerful workflow!", 
            "title": "2) Choose a Mesh to Edit"
        }, 
        {
            "location": "/quickstart/#3-sculpt-your-mesh", 
            "text": "Quick Video:  Mesh Sculpting and Smoothing   Let's make this sphere look more interesting!   The default Unity sphere is only 1 meter across, so let's scale it up about 10x.  Activate  Push / Pull Mode  by clicking it's icon ( ) in the  Mode Toolbar .  Hover your mouse over the Sphere, and  Left Click  to \"pull\",  Shift Left Click  to \"push\" geometry.  To smooth out hard edges, activate  Smoothing Mode  ( ) and brush the mesh with  Left Click .", 
            "title": "3) Sculpt Your Mesh"
        }, 
        {
            "location": "/quickstart/#4-paint-pretty-colors", 
            "text": "Quick Video:  Painting Vertex Colors   Danger, Danger! The default Unity material won't show  Vertex Coloring , so let's create a new material that will:   In your Project Panel, right-click and choose  Create   Material , then give it a really cool name  With the new material selected, look at the top of the Inspector Panel- see that drop-down labeled \"Shader\"?  Click it, and choose  Polybrush   Standard Vertex Color  Apply this material to the mesh you'd like to paint    Hey custom shader people! You can use  any  shader, as long as it supports vertex colors   Now we're ready to paint vertex colors:   Activate  Color Painting Mode  by clicking it's icon ( ) in the  Mode Toolbar .  Click to select a color from the  Color Palette  buttons at the bottom of the  Polybrush Panel .  Hover your mouse over the Sphere, and  Left Click  to paint,  Shift Left Click  to erase.", 
            "title": "4) Paint Pretty Colors"
        }, 
        {
            "location": "/quickstart/#5-blend-fancy-textures", 
            "text": "Quick Video:  Texture Blending   Texture Blending  requires a special shader- you can create your own, or use ours:   In your Project Panel, right-click and choose  Create   Material .  With the new material selected, look at the top of the Inspector Panel- see that drop-down labeled \"Shader\"? Click it, and choose  Polybrush   Standard Texture Blend .  Apply this material to the mesh you'd like to paint.    Prefer your custom shader? You can use  any  shader with Polybrush - see  Writing Texture Blend Shaders  for more information.   We can now paint and blend textures on the mesh:   Activate  Texture Blending Mode  by clicking it's icon ( ) in the  Mode Toolbar .  Click on a texture in the bottom of the  Polybrush Panel  to select it.  Hover your mouse over the Sphere, and  Left Click  to paint,  Shift Left Click  to erase the selected texture.       Textures kindly provided by  gametextures.com", 
            "title": "5) Blend Fancy Textures"
        }, 
        {
            "location": "/quickstart/#summary", 
            "text": "Congratulations, you've learned the essentials of Polybrush!  You may now  Choose Your Own Path:  The Path of Adventure and Dubious Wisdom:  Jump right in and learn the rest as you go.  You can always return to these docs or ask us if you have specific questions.  Enjoy!  The Path of Infinite Wisdom:  Use the handy-dandy topic links (on your left) to jump quickly through these docs.  Whether you skim, read in-depth, or just watch video tutorials, you'll be lvl60 in no time.", 
            "title": "Summary"
        }, 
        {
            "location": "/interface/", 
            "text": "A) Mode Toolbar\n\n\nSets and displays the active \nBrush Mode\n. Active mode is indicated by a blue accent line below it's icon.\n\n\nChoosing any of Unity's standard tools (Pan, Move, Rotate, Scale) will automatically de-activate Polybrush.\n\n\nB) Brush Settings\n\n\nBrush Settings\n lets you choose \nRadius\n, \nFalloff\n, \nStrength/Opacity\n, and \nFalloff Curve\n.\n\n\nYou may also save and load often used brushes via the \nBrush Preset selector\n.\n\n\nC) Brush Mirroring\n\n\nChooses the \nBrush Mirroring\n methods to use with the current brush.\n\n\nD) Mode Settings\n\n\nAny additional settings specific to the current \nBrush Mode\n.", 
            "title": "The Interface"
        }, 
        {
            "location": "/interface/#a-mode-toolbar", 
            "text": "Sets and displays the active  Brush Mode . Active mode is indicated by a blue accent line below it's icon.  Choosing any of Unity's standard tools (Pan, Move, Rotate, Scale) will automatically de-activate Polybrush.", 
            "title": "A) Mode Toolbar"
        }, 
        {
            "location": "/interface/#b-brush-settings", 
            "text": "Brush Settings  lets you choose  Radius ,  Falloff ,  Strength/Opacity , and  Falloff Curve .  You may also save and load often used brushes via the  Brush Preset selector .", 
            "title": "B) Brush Settings"
        }, 
        {
            "location": "/interface/#c-brush-mirroring", 
            "text": "Chooses the  Brush Mirroring  methods to use with the current brush.", 
            "title": "C) Brush Mirroring"
        }, 
        {
            "location": "/interface/#d-mode-settings", 
            "text": "Any additional settings specific to the current  Brush Mode .", 
            "title": "D) Mode Settings"
        }, 
        {
            "location": "/modes/modes/", 
            "text": "Modes\n define how a brush interacts with a mesh.  Some move vertices around, others apply values per-vertex (like color).\n\n\nTo enter a \nBrush Mode\n click on the toolbar button.  To exit a \nBrush Mode\n select the \nMove\n, \nRotate\n, \nScale\n, or \nGUI\n tool in the Unity toolbar (or use the \nW, E, R, T\n keyboard shortcut).\n\n\nYou can tell if a \nBrush Mode\n is on by it's button in the toolbar.  The active mode will appear with a blue accent line:\n\n\n\n\n\n\n\n\n\nThe available modes are:\n\n\n\n\n\n\n\n\n\n\nMode Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nPush / Pull\n\n\nMove vertex positions in a direction.\n\n\n\n\n\n\n\n\nSmooth\n\n\nSmooth the differences between vertex positions.\n\n\n\n\n\n\n\n\nVertex Color\n\n\nPaint mesh colors.\n\n\n\n\n\n\n\n\nTexture Blend\n\n\nPaint mesh textures.\n\n\n\n\n\n\n\n\nSettings\n\n\nGeneral Polybrush settings.", 
            "title": "Overview"
        }, 
        {
            "location": "/modes/raise/", 
            "text": "About\n\n\nThe \nPush / Pull\n tool moves vertices in positive and negative directions along an axis (determined by the \nDirection\n setting).\n\n\nUsage\n\n\nSelect any mesh object, enter \nPush / Pull\n mode, then click and drag while hovering over the selected mesh.\n\n\nHolding the \nShift\n key while dragging the \nLeft Mouse Button\n will inverse the movement direction (Up becomes Down, Right becomes left, etc).\n\n\nThe actual movement of vertices will be affected by the current \nBrush Settings\n.  Check out the \nBrush Settings\n page for more information on how.\n\n\nSettings\n\n\nIgnore Open Edges\n\n\nWhen \nIgnore Open Edges\n is enabled, any vertices that make up an open edge (eg, an edge that is only a part of one face) will not be affected by the brush.\n\n\n\n\nBrush Normal is Sticky\n\n\nWhen the brush direction is set to \nBrush Normal\n this locks the vertex movement direction to the axis the brush normal is facing at the time of first application.\n\n\nDirection\n\n\nDirection\n determines how vertices move.  \nUp\n, \nDown\n, and \nForward\n move vertices along the X, Y, and Z axes respectively.  \nBrush Normal\n moves vertices along axis of the brush orientation's up direction.  \nVertex Normal\n moves vertices along their normals.  Use \nVertex Normal\n on objects like spheres where you want the movement to be relative to the direction of the affected vertices.\n\n\nBrush Effect\n\n\nThis value determines the distance a brush stroke will move vertices in it's path.  Higher values mean more movement, smaller values less.  Holding \nShift\n while dragging negates this value (eg, 2 becomes -2).\n\n\nBrush Effect\n can be negative, which is handy for carving out river beds or valleys!", 
            "title": "Push / Pull"
        }, 
        {
            "location": "/modes/raise/#about", 
            "text": "The  Push / Pull  tool moves vertices in positive and negative directions along an axis (determined by the  Direction  setting).", 
            "title": "About"
        }, 
        {
            "location": "/modes/raise/#usage", 
            "text": "Select any mesh object, enter  Push / Pull  mode, then click and drag while hovering over the selected mesh.  Holding the  Shift  key while dragging the  Left Mouse Button  will inverse the movement direction (Up becomes Down, Right becomes left, etc).  The actual movement of vertices will be affected by the current  Brush Settings .  Check out the  Brush Settings  page for more information on how.", 
            "title": "Usage"
        }, 
        {
            "location": "/modes/raise/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/modes/raise/#ignore-open-edges", 
            "text": "When  Ignore Open Edges  is enabled, any vertices that make up an open edge (eg, an edge that is only a part of one face) will not be affected by the brush.", 
            "title": "Ignore Open Edges"
        }, 
        {
            "location": "/modes/raise/#brush-normal-is-sticky", 
            "text": "When the brush direction is set to  Brush Normal  this locks the vertex movement direction to the axis the brush normal is facing at the time of first application.", 
            "title": "Brush Normal is Sticky"
        }, 
        {
            "location": "/modes/raise/#direction", 
            "text": "Direction  determines how vertices move.   Up ,  Down , and  Forward  move vertices along the X, Y, and Z axes respectively.   Brush Normal  moves vertices along axis of the brush orientation's up direction.   Vertex Normal  moves vertices along their normals.  Use  Vertex Normal  on objects like spheres where you want the movement to be relative to the direction of the affected vertices.", 
            "title": "Direction"
        }, 
        {
            "location": "/modes/raise/#brush-effect", 
            "text": "This value determines the distance a brush stroke will move vertices in it's path.  Higher values mean more movement, smaller values less.  Holding  Shift  while dragging negates this value (eg, 2 becomes -2).  Brush Effect  can be negative, which is handy for carving out river beds or valleys!", 
            "title": "Brush Effect"
        }, 
        {
            "location": "/modes/smooth/", 
            "text": "About\n\n\nThe \nSmooth\n tool averages the differences between vertex positions along a axis (set by \nDirection\n).  Use this mode to make your jagged vertices more uniform.\n\n\nUsage\n\n\nSelect any mesh object, enter \nPush/Pull\n mode, then click and drag while hovering over the selected mesh.\n\n\nThe actual movement of vertices will be affected by the current \nBrush Settings\n.  Check out the \nBrush Settings\n page for more information on how.\n\n\nSettings\n\n\nIgnore Open Edges\n\n\nWhen \nIgnore Open Edges\n is enabled, any vertices that make up an open edge (eg, an edge that is only a part of one face) will not be affected by the brush.\n\n\n\n\nBrush Normal is Sticky\n\n\nWhen the brush direction is set to \nBrush Normal\n this locks the vertex movement direction to the axis the brush normal is facing at the time of first application.\n\n\nDirection\n\n\nDirection\n determines how vertices move.  \nUp\n, \nDown\n, and \nForward\n move vertices along the X, Y, and Z axes respectively.  \nBrush Normal\n moves vertices along axis of the brush orientation's up direction.  \nVertex Normal\n moves vertices along their normals.  Use \nVertex Normal\n on objects like spheres where you want the movement to be relative to the direction of the affected vertices.\n\n\nIn \nSmooth\n mode the \nVertex Normal\n brush direction behaves slightly differently than you might expect - instead of constraining the movement path to the normal each vertex position will be averaged with it's neighbors.  This is very handy for reducing large gaps in vertex positions and making your mesh look super-smooth.", 
            "title": "Smooth"
        }, 
        {
            "location": "/modes/smooth/#about", 
            "text": "The  Smooth  tool averages the differences between vertex positions along a axis (set by  Direction ).  Use this mode to make your jagged vertices more uniform.", 
            "title": "About"
        }, 
        {
            "location": "/modes/smooth/#usage", 
            "text": "Select any mesh object, enter  Push/Pull  mode, then click and drag while hovering over the selected mesh.  The actual movement of vertices will be affected by the current  Brush Settings .  Check out the  Brush Settings  page for more information on how.", 
            "title": "Usage"
        }, 
        {
            "location": "/modes/smooth/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/modes/smooth/#ignore-open-edges", 
            "text": "When  Ignore Open Edges  is enabled, any vertices that make up an open edge (eg, an edge that is only a part of one face) will not be affected by the brush.", 
            "title": "Ignore Open Edges"
        }, 
        {
            "location": "/modes/smooth/#brush-normal-is-sticky", 
            "text": "When the brush direction is set to  Brush Normal  this locks the vertex movement direction to the axis the brush normal is facing at the time of first application.", 
            "title": "Brush Normal is Sticky"
        }, 
        {
            "location": "/modes/smooth/#direction", 
            "text": "Direction  determines how vertices move.   Up ,  Down , and  Forward  move vertices along the X, Y, and Z axes respectively.   Brush Normal  moves vertices along axis of the brush orientation's up direction.   Vertex Normal  moves vertices along their normals.  Use  Vertex Normal  on objects like spheres where you want the movement to be relative to the direction of the affected vertices.  In  Smooth  mode the  Vertex Normal  brush direction behaves slightly differently than you might expect - instead of constraining the movement path to the normal each vertex position will be averaged with it's neighbors.  This is very handy for reducing large gaps in vertex positions and making your mesh look super-smooth.", 
            "title": "Direction"
        }, 
        {
            "location": "/modes/color/", 
            "text": "Important!\n\n\nVertex Color\n mode requires special shaders to work.  If you're not able to paint colors on a mesh, change the material to \nProCore/Polybrush/Material/Standard Vertex Color\n and try again.\n\n\n\n\n\n\n\n\n\n\n\nAbout\n\n\nColor Paint\n mode enables you to set the vertex colors of a mesh with a brush or paint bucket.  Use the toolbar under \nPaint Settings\n to choose between the two modes.\n\n\nVertex Color\n mode will only work if the shader a material uses supports vertex colors.  Most default Unity shaders do not support vertex colors!  \nPolybrush\n will show a warning when hovering a mesh with an incompatible shader.\n\n\nPolybrush\n includes some default materials that support vertex colors.  Use one of these materials if you want to paint colors on a mesh (or alternatively any other shader that reads the \nmesh.colors\n attribute).\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nPath\n\n\n\n\n\n\n\n\n\n\nDiffuse Vertex Color\n\n\nA Legacy Diffuse shader with support for a texture, normal map, and vertex colors.\n\n\nProCore/Polybrush/Materials/Diffuse Vertex Color\n\n\n\n\n\n\nStandard Vertex Color\n\n\nThis material behaves similarly to the Standard shader, but with support for painting vertex colors.\n\n\nProCore/Polybrush/Materials/Standard Vertex Color\n\n\n\n\n\n\n\n\nUsage\n\n\nSelect any mesh object, enter \nPush/Pull\n mode, then click and drag while hovering over the selected mesh.\n\n\nThe actual color applied to vertices will be affected by the current \nBrush Settings\n.  Check out the \nBrush Settings\n page for more information on how.\n\n\nSettings\n\n\nBrush Type\n\n\nSpecific to \nVertex Color\n and \nTexture Blend\n modes is the option to select between the standard circular brush and a special bucket brush.\n\n\nPaint Bucket\n will restrict the brush to the triangle (or triangles) touched by the mouse.\n\n\nBrush Color\n\n\nBrush Color\n shows the current brush color.  The final color the brush applies also depends on the \nBrush Strength\n and the underlying mesh color.\n\n\n\n\nTo select a new brush color, either click an element in the Color Palette list or manually change the Brush Color field.\n\n\n\n\n\nColor Mask\n\n\nThe \nColor Mask\n field allows you to selectively modify color values by channel (\nR, G, B, A\n).  By default the all color channels are affected by the brush.  Toggling off channels tells \nPolybrush\n to leave those channel values alone when modifying the mesh.\n\n\nColor Palette\n\n\nThe \nColor Palette\n provides quick access to brush colors.  You can add, remove, or change colors in this list at any time.  To reset a palette back to the default values, click \nSet Defaults\n below the list view.\n\n\nTo add a new \nColor Palette\n open the \nPalettes\n popup and select \nAdd Palette...\n.", 
            "title": "Vertex Color"
        }, 
        {
            "location": "/modes/color/#about", 
            "text": "Color Paint  mode enables you to set the vertex colors of a mesh with a brush or paint bucket.  Use the toolbar under  Paint Settings  to choose between the two modes.  Vertex Color  mode will only work if the shader a material uses supports vertex colors.  Most default Unity shaders do not support vertex colors!   Polybrush  will show a warning when hovering a mesh with an incompatible shader.  Polybrush  includes some default materials that support vertex colors.  Use one of these materials if you want to paint colors on a mesh (or alternatively any other shader that reads the  mesh.colors  attribute).     Name  Description  Path      Diffuse Vertex Color  A Legacy Diffuse shader with support for a texture, normal map, and vertex colors.  ProCore/Polybrush/Materials/Diffuse Vertex Color    Standard Vertex Color  This material behaves similarly to the Standard shader, but with support for painting vertex colors.  ProCore/Polybrush/Materials/Standard Vertex Color", 
            "title": "About"
        }, 
        {
            "location": "/modes/color/#usage", 
            "text": "Select any mesh object, enter  Push/Pull  mode, then click and drag while hovering over the selected mesh.  The actual color applied to vertices will be affected by the current  Brush Settings .  Check out the  Brush Settings  page for more information on how.", 
            "title": "Usage"
        }, 
        {
            "location": "/modes/color/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/modes/color/#brush-type", 
            "text": "Specific to  Vertex Color  and  Texture Blend  modes is the option to select between the standard circular brush and a special bucket brush.  Paint Bucket  will restrict the brush to the triangle (or triangles) touched by the mouse.", 
            "title": "Brush Type"
        }, 
        {
            "location": "/modes/color/#brush-color", 
            "text": "Brush Color  shows the current brush color.  The final color the brush applies also depends on the  Brush Strength  and the underlying mesh color.   To select a new brush color, either click an element in the Color Palette list or manually change the Brush Color field.", 
            "title": "Brush Color"
        }, 
        {
            "location": "/modes/color/#color-mask", 
            "text": "The  Color Mask  field allows you to selectively modify color values by channel ( R, G, B, A ).  By default the all color channels are affected by the brush.  Toggling off channels tells  Polybrush  to leave those channel values alone when modifying the mesh.", 
            "title": "Color Mask"
        }, 
        {
            "location": "/modes/color/#color-palette", 
            "text": "The  Color Palette  provides quick access to brush colors.  You can add, remove, or change colors in this list at any time.  To reset a palette back to the default values, click  Set Defaults  below the list view.  To add a new  Color Palette  open the  Palettes  popup and select  Add Palette... .", 
            "title": "Color Palette"
        }, 
        {
            "location": "/modes/texture/", 
            "text": "Important!\n\n\nTexture Blending\n mode requires special shaders to work.  If you're not able to paint textures on a mesh, apply one of the included materials (see below for a chart) to your model and try again.\n\n\n\n\n\n\n\n\n\n\n\nAbout\n\n\nTexture Painting\n mode is a special interface for texture blending shaders.  It applies data to a mesh using a combination of some or all of the following attributes: \n[ UV0, UV2, UV3, UV3, Color, Tangent ]\n.\n\n\nThis information is defined by the shader and is just 2 extra lines in your shader code (more on that later).  \nPolybrush\n includes a few different blend materials to get you started:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nPath\n\n\n\n\n\n\n\n\n\n\nStandard Texture Blend\n\n\nA PBR enabled material with support for blending up to 12 different textures.\n\n\nProCore/Polybrush/Materials/Standard Texture Blend\n\n\n\n\n\n\nStandard Texture Blend Bump\n\n\nA PBR enabled material with support for blending up to 4 different textures with normal maps.\n\n\nProCore/Polybrush/Materials/Standard Texture Blend Bump\n\n\n\n\n\n\nTriPlanar Texture Blend\n\n\nA PBR enabled material with support for blending up to 4 textures and automatically projects UV coordinates.\n\n\nProCore/Polybrush/Materials/TriPlanar Texture Blend\n\n\n\n\n\n\nTriPlanar Texture Blend Legacy\n\n\nA Blinn-Phong lighting pipeline (legacy) material with support for blending up to 4 textures and automatically projects UV coordinates.\n\n\nProCore/Polybrush/Materials/TriPlanar Texture Blend Legacy\n\n\n\n\n\n\nUnlit Texture Blend\n\n\nA simple unlit material with support for blending up to 6 textures.\n\n\nProCore/Polybrush/Materials/Unlit Texture Blend\n\n\n\n\n\n\n\n\nIf you'd like to write your own texture blending shaders, see the \nWriting Texture Blending Shaders\n document for more information on how that works.\n\n\nUsage\n\n\nSelect any mesh object with a compatible material, enter \nTexture Blend\n mode, then click and drag while hovering over the selected mesh.\n\n\nPolybrush\n will show a warning if the mesh you're hovering doesn't support texture blending.  See \nWriting Texture Blend Shaders\n for more detailed information on compatible shaders.  If you're not comfortable writing shaders, you can just use one of \nPolybrush\n's included \nTexture Blend\n materials.\n\n\nSettings\n\n\nBrush Type\n\n\nSpecific to \nVertex Color\n and \nTexture Blend\n modes is the option to select between the standard circular brush and a special bucket brush.\n\n\nPaint Bucket\n will restrict the brush to the triangle (or triangles) touched by the mouse.\n\n\nTexture Selection\n\n\nPolybrush\n will automatically detect what textures are available per-material and display them as a selection grid.  To select a brush texture, click on one of the textures in the grid.\n\n\nYour currently selected texture will be shown with a green bar under it's preview.", 
            "title": "Texture Blend"
        }, 
        {
            "location": "/modes/texture/#about", 
            "text": "Texture Painting  mode is a special interface for texture blending shaders.  It applies data to a mesh using a combination of some or all of the following attributes:  [ UV0, UV2, UV3, UV3, Color, Tangent ] .  This information is defined by the shader and is just 2 extra lines in your shader code (more on that later).   Polybrush  includes a few different blend materials to get you started:     Name  Description  Path      Standard Texture Blend  A PBR enabled material with support for blending up to 12 different textures.  ProCore/Polybrush/Materials/Standard Texture Blend    Standard Texture Blend Bump  A PBR enabled material with support for blending up to 4 different textures with normal maps.  ProCore/Polybrush/Materials/Standard Texture Blend Bump    TriPlanar Texture Blend  A PBR enabled material with support for blending up to 4 textures and automatically projects UV coordinates.  ProCore/Polybrush/Materials/TriPlanar Texture Blend    TriPlanar Texture Blend Legacy  A Blinn-Phong lighting pipeline (legacy) material with support for blending up to 4 textures and automatically projects UV coordinates.  ProCore/Polybrush/Materials/TriPlanar Texture Blend Legacy    Unlit Texture Blend  A simple unlit material with support for blending up to 6 textures.  ProCore/Polybrush/Materials/Unlit Texture Blend     If you'd like to write your own texture blending shaders, see the  Writing Texture Blending Shaders  document for more information on how that works.", 
            "title": "About"
        }, 
        {
            "location": "/modes/texture/#usage", 
            "text": "Select any mesh object with a compatible material, enter  Texture Blend  mode, then click and drag while hovering over the selected mesh.  Polybrush  will show a warning if the mesh you're hovering doesn't support texture blending.  See  Writing Texture Blend Shaders  for more detailed information on compatible shaders.  If you're not comfortable writing shaders, you can just use one of  Polybrush 's included  Texture Blend  materials.", 
            "title": "Usage"
        }, 
        {
            "location": "/modes/texture/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/modes/texture/#brush-type", 
            "text": "Specific to  Vertex Color  and  Texture Blend  modes is the option to select between the standard circular brush and a special bucket brush.  Paint Bucket  will restrict the brush to the triangle (or triangles) touched by the mouse.", 
            "title": "Brush Type"
        }, 
        {
            "location": "/modes/texture/#texture-selection", 
            "text": "Polybrush  will automatically detect what textures are available per-material and display them as a selection grid.  To select a brush texture, click on one of the textures in the grid.  Your currently selected texture will be shown with a green bar under it's preview.", 
            "title": "Texture Selection"
        }, 
        {
            "location": "/brushMirroring/", 
            "text": "Sculpting with a single brush is pretty great, but what if you want to take things to the next level?\n\n\nBrush Mirroring\n is the answer.  You can control up to \nfour\n brushes in the scene simultaneously using this feature.\n\n\n\n\nBrush Mirroring Options\n\n\n\n\n\n\n\n\n\nA) Mirroring Axis\n\n\nThe first three toggles (\nA\n) determine the coordinate space that the axis will be calculated from (\nX\n, \nY\n, or \nZ\n).\n\n\nAnywhere from 0 to all 3 axis can be chosen.\n\n\nB) Mirroring Coordinate Space\n\n\nThe second toggleset sets the axis to mirror across.\n\n\nIn \nWorld\n the axes are always the same, matching Unity's world coordinates\n\nCamera\n uses the Scene camera's transform as the coordinate to cast axes.", 
            "title": "Brush Mirroring"
        }, 
        {
            "location": "/brushMirroring/#brush-mirroring-options", 
            "text": "", 
            "title": "Brush Mirroring Options"
        }, 
        {
            "location": "/brushMirroring/#a-mirroring-axis", 
            "text": "The first three toggles ( A ) determine the coordinate space that the axis will be calculated from ( X ,  Y , or  Z ).  Anywhere from 0 to all 3 axis can be chosen.", 
            "title": "A) Mirroring Axis"
        }, 
        {
            "location": "/brushMirroring/#b-mirroring-coordinate-space", 
            "text": "The second toggleset sets the axis to mirror across.  In  World  the axes are always the same, matching Unity's world coordinates Camera  uses the Scene camera's transform as the coordinate to cast axes.", 
            "title": "B) Mirroring Coordinate Space"
        }, 
        {
            "location": "/brushSettings/", 
            "text": "Brush Settings\n determines how a brush will affect meshes.  In the image below I've used the gear icon to expand the settings panel, exposing 3 additional settings.\n\n\n\n\n\n\n\n\n\nA) Brush Preset Selector\n\n\nClick this drop-down to choose from saved Brush Presets\n\n\nB) Save Brush\n\n\nSave the current brush settings as a new Preset, or overwrite an existing Preset\n\n\nC) Brush Options\n\n\n Min/Max Values\n\n\n\n\nMin: This is the minimum value the \nRadius\n slider will allow.  This value cannot be negative.\n\n\nMax: This is the maximum value the \nRadius\n slider will allow.  This value cannot be less than \nBrush Radius Min\n.\n\n\n\n\n Radius\n\n\nThis value determines how big your brush's entire effective area is.  The \nRadius\n is shown as the second colored ring in the scene view.\n\n\n\n\nShortcut\n: Control (Command) + Mouse Wheel\n\n\n\n\nFalloff\n\n\nFalloff is the distance from the center of a brush at which the strength begins to taper to 0.  This value is normalized; 1 means the entire brush gets full strength, 0 means the very center point of a brush is full strength and the edges are 0.\n\n\n\n\nShortcut\n: Shift + Mouse Wheel\n\n\n\n\n Strength\n\n\nStrength is the effectiveness of this brush.  The actual applied strength also depends on the Falloff setting.\n\n\n\n\nShortcut\n: Control (Command) + Shift + Mouse Wheel\n\n\n\n\n Falloff Curve\n\n\nThe falloff curve determines how values between the falloff and radius will be calculated.\n\n\n\n\nScene Gizmo Example", 
            "title": "Brush Settings"
        }, 
        {
            "location": "/brushSettings/#a-brush-preset-selector", 
            "text": "Click this drop-down to choose from saved Brush Presets", 
            "title": "A) Brush Preset Selector"
        }, 
        {
            "location": "/brushSettings/#b-save-brush", 
            "text": "Save the current brush settings as a new Preset, or overwrite an existing Preset", 
            "title": "B) Save Brush"
        }, 
        {
            "location": "/brushSettings/#c-brush-options", 
            "text": "", 
            "title": "C) Brush Options"
        }, 
        {
            "location": "/brushSettings/#minmax-values", 
            "text": "Min: This is the minimum value the  Radius  slider will allow.  This value cannot be negative.  Max: This is the maximum value the  Radius  slider will allow.  This value cannot be less than  Brush Radius Min .", 
            "title": "Min/Max Values"
        }, 
        {
            "location": "/brushSettings/#radius", 
            "text": "This value determines how big your brush's entire effective area is.  The  Radius  is shown as the second colored ring in the scene view.   Shortcut : Control (Command) + Mouse Wheel", 
            "title": "Radius"
        }, 
        {
            "location": "/brushSettings/#falloff", 
            "text": "Falloff is the distance from the center of a brush at which the strength begins to taper to 0.  This value is normalized; 1 means the entire brush gets full strength, 0 means the very center point of a brush is full strength and the edges are 0.   Shortcut : Shift + Mouse Wheel", 
            "title": "Falloff"
        }, 
        {
            "location": "/brushSettings/#strength", 
            "text": "Strength is the effectiveness of this brush.  The actual applied strength also depends on the Falloff setting.   Shortcut : Control (Command) + Shift + Mouse Wheel", 
            "title": "Strength"
        }, 
        {
            "location": "/brushSettings/#falloff-curve", 
            "text": "The falloff curve determines how values between the falloff and radius will be calculated.", 
            "title": "Falloff Curve"
        }, 
        {
            "location": "/brushSettings/#scene-gizmo-example", 
            "text": "", 
            "title": "Scene Gizmo Example"
        }, 
        {
            "location": "/shaders/", 
            "text": "Constructing a shader that is compatible with \nPolybrush\n's \nTexture Paint Mode\n is very simple.  You can either write your code by hand, or use \nShaderForge\n.\n\n\nPolybrush\n will pass texture blending information to the shader using some combination of mesh attributes (ex; via color, tangent, uv0, uv2, etc).\n\n\nThere are two methods for passing information about how a shader uses mesh data: \n\n\n\n\nBy defining in shader code which mesh channels to look for data in (UV, Color, etc)\n\n\nBy creating a separate metadata file that stores per-attribute information\n\n\n\n\nIf your shader just wants to map \nColor.R\n to \n_Texture1\n, \nColor.G\n to \n_Texture2\n, etc go with the first option.  If your shader has more complex interactions with attribute information, use the metadata method.\n\n\nDefining Channel Data in Shader Code (\nLegacy\n)\n\n\nIf your shader simply blends between textures using normalized values set in a mesh array, you can use this method to make the shader compatible with Polybrush.\n\n\n\n\nSomewhere in the shader you must define how many textures are used: \ndefine Z_TEXTURE_CHANNELS 8\n\n\nSomewhere in the shader the mesh attributes used must be defined: \ndefine Z_MESH_ATTRIBUTES COLOR UV UV3\n\n    The order in which the mesh attributes are defined also tells \nPolybrush\n which \nTexture\n inputs belong to which attribute.  For example, \ndefine Z_MESH_ATTRIBUTES UV0 UV3 UV4\n tells \nPolybrush\n that the first 4 textures should map to the 4 values in each vertex \nuv0\n property, the next 4 textures belong to \nuv3\n, and so on.\n\n\n\n\nThe available mesh attributes values are \nUV0, UV2, UV3, UV4, COLOR, TANGENT\n.  Each value should only be used at most once.\n\n\nPolybrush\n accesses these statements by searching the shader source, so they may be either provided in a comment or defined.\n\n\n#define Z_TEXTURE_CHANNELS 8\n// is the same as\n// define Z_TEXTURE_CHANNELS 8\n\n\n\nHere's what this could look like in shader code (boring bits omitted)\n\n\nProperties\n{\n    _MainTex (\"Texture\", 2D) = \"white\" {}\n    _Texture1 (\"Texture 1\", 2D) = \"white\" {}\n    _Texture2 (\"Texture 2\", 2D) = \"white\" {}\n    _Texture3 (\"Texture 3\", 2D) = \"white\" {}\n    _Texture4 (\"Texture 4\", 2D) = \"white\" {}\n    _Texture5 (\"Texture 5\", 2D) = \"white\" {}\n}\nSubShader\n{\n    Pass\n    {\n        // Tell Polybrush that this shader supports 6 texture channels (Texture, Texture 1, so on)\n        #define Z_TEXTURE_CHANNELS 6\n\n        // Tells Polybrush that the shader expects data in the uv3 and uv4 channels\n        // (4 components in uv3, 2 in uv4)\n        #define Z_MESH_ATTRIBUTES UV3 UV4\n\n        struct appdata\n        {\n            // local position\n            float4 vertex : POSITION;\n            // the texture coordinate\n            float2 uv : TEXCOORD0;\n            // float2 uv1 : TEXCOORD1; // not used (this would be mesh.uv2)\n            // mesh.uv3 data\n            float4 uv2 : TEXCOORD2;\n            // mesh.uv4 data\n            float4 uv3 : TEXCOORD3;\n        }\n\n        etc...\n\n\n\nIn this example \nPolybrush\n will show 6 textures in the palette and map each texture's strength to \nmesh.uv.xyzw\n and \nmesh.uv3.xy\n respectively.\n\n\nCheck out the shader \nz_UnlitTextureBlend.shader\n for a simple working example.\n\n\nMetaData File\n\n\nPolybrush\n can store fine-grained instructions for interpreting mesh data in the form of a metadata file.  A metadata file is composed of a shader reference (pointing to the shader it describes) and a list of \nz_AttributeLayout\n entries.  Each entry contains all the necessary information about how a value is used in a shader for \nPolybrush\n to work with.\n\n\nWhen \nPolybrush\n loads a material into \nTexture Mode\n it will first search for an accompanying \nShaderName.pbs.json\n file, then try to fall back on the Legacy method (searching for \nZ_DEFINE_MESH_ATTRIBUTES\n in shader source).\n\n\nCreating MetaData\n\n\n\nTo create a new \nPolybrush\n metadata file:\n\n\n\n\nSelect the shader you want to work with.\n\n\nRight click (Option click Mac) the Shader and select \nCreate/Polybrush/Shader MetaData\n.\n\n\n\n\nBy default \nPolybrush\n creates the new file using the name of the selected shader, placing it in the same directory.  This is where \nPolybrush\n will look for metadata.  To specify a different name or path, in the shader add the following comment:\n\n\n// Z_SHADER_METADATA MyMetaDataFolder/SomeOtherName.pbs.json\n\n\n\n\nThe path provided after \nZ_SHADER_METADATA\n is relative to the directory of the shader.\n\n\nEditing MetaData\n\n\n\nMercifully, you do not have to write this metadata by hand (though you can if you'd like to).\n\n\n\n\n\n\n\n\nProperty Target\n - The shader property that this attribute will affect.  \n\n\nMore complex interactions may not map to a single property, so this field may be either the name of a property, or a simple description.\n\n\nIf the string provided to this field matches a \n2D\n property in the shader, \nPolybrush\n will load the material's texture matching this property name.   If it does not match a texture property, this string will be shown as the preview in the texture selection well.\n\n\n\n\n\n\nChannel\n - The mesh channel that this attribute will draw from.\n\n\n\n\nIndex\n - Which component of the channel this attribute receives data from.\n\n\nRange\n - The range (x is min, y is max) that this attribute will operate in.\n\n\nGroup\n - Attributes with matching groups will affect one another when applied.  Use \nNo Mask\n to mark that this attribute will always operate independently.\n\n\n\n\nHow Polybrush Applies Texture Data\n\n\n\nWhen a texture is selected in \nTexture Mode\n, \nPolybrush\n sets a new target value for each attribute matching the selected attributes \ngroup\n.  The selected attribute has its target value set to \nRange\n.max, while all other attributes in the group are set to their \nRange\n.min value.  \nPolybrush\n then applies this new mix of attribute values to the mesh, taking into account brush strength and falloff.\n\n\nA Simple Example\n\n\n\nSay you have a shader with 5 textures; a base texture and 4 blend textures.  This shader reads texture blending information from the \nmesh.color\n channel.  The final fragment color is built using the following formula:\n\n\n// sample the texture\nfixed4 col1 = tex2D(_MainTex, i.uv);\nfixed4 col2 = tex2D(_Texture1, i.uv) * i.color.y;\nfixed4 col3 = tex2D(_Texture2, i.uv) * i.color.z;\nfixed4 col4 = tex2D(_Texture3, i.uv) * i.color.w;\n\nfloat snowMix = i.color.x * ((cnoise(i.uv * _SnowTiling) + 1) * .5);\nfixed4 final_color = lerp(lerp(lerp(col1, col2, i.color.y), col3, i.color.z), col4, i.color.w);\nfinal_color = lerp(final_color, _SnowColor, snowMix);\n\n\n\n\nIn this case you'll want \nPolybrush\n to show 5 entries in the \nTexture Palette\n: 4 textures and \"Snow\".  This means the metadata needs 5 entries.\n\n\nAll the texture properties are related, meaning when one value is set to maximum strength the others should be set to minimum strength.  To do this, create each for these attributes with the same group.\n\n\nThe attribute values are set like so:\n\n\n\n\n\n\n\n\nProperty\n\n\nChannel\n\n\nComponent\n\n\nRange\n\n\nGroup\n\n\n\n\n\n\n\n\n\n\n_MainTex\n\n\nColor\n\n\nG\n\n\n{ 1, 0 }\n\n\n0\n\n\n\n\n\n\n_Texture1\n\n\nColor\n\n\nG\n\n\n{ 0, 1 }\n\n\n0\n\n\n\n\n\n\n_Texture2\n\n\nColor\n\n\nB\n\n\n{ 0, 1 }\n\n\n0\n\n\n\n\n\n\n_Texture3\n\n\nColor\n\n\nA\n\n\n{ 0, 1 }\n\n\n0\n\n\n\n\n\n\nSnow\n\n\nColor\n\n\nR\n\n\n{ 0, 1 }\n\n\nNo Mask\n\n\n\n\n\n\n\n\nYou may have noticed that \n_MainTex\n and \n_Texture1\n  share a common channel.  The reason is that \n_MainTex\n is special in that it does not map it's strength to a single attribute, rather, its strength is determined by the lack of strength in the other texture channels.  \n\n\nTo accomplish this, we set \n_MainTex\n to use the \nColor\n channel and register it to the \nG\n field.  However, instead of setting the strength from 0 to 1 it is from 1 to 0.  That means when \nPolybrush\n applies \n_MainTex\n at full strength the \nColor.G\n field will be 0, and the \nColor.B\n and \nColor.A\n fields will also be 0 (since their min values are 0).\n\n\nSnow is also a special case.  Since it is a generated effect in the shader it does not map to a texture property.  \nPolybrush\n will display the name \"Snow\" for this value.  By setting the group to \"No Mask\" we're telling \nPolybrush\n that this value should be modified independent of all other attributes.  That means when you're applying Snow at full strength all other attributes will remain unaffected.\n\n\nWith ShaderForge\n\n\nPost-Processing\n\n\nShaders built with \nShaderForge\n require some additional work to be compatible with \nPolybrush\n.  Fortunately through some post-processing this process is extremely simple.  In short, \nPolybrush\n will automatically listen for changes to any shader with the suffix \n_SfSrc\n, then make some changes to the source code and compile a new shader right next to it (omitting the suffix so you aren't confused).\n\n\nFor example, if you have \nMyNeatoShaderForgeShader_SfSrc.shader\n it will be compiled and renamed to \nMyNeatoShaderForgeShader.shader\n.  Use this shader in your game (not the suffixed one!).\n\n\nSimilar to writing shader code, you need to define how many textures are used and what mesh attributes data is provided in.  Usually this means as a comment on one of the nodes (right click and select \"Edit Comment\").\n\n\nIt is required that all ShaderForge shaders have the following two lines present in node comments:\n\n\n\n\n\n\ndefine Z_TEXTURE_CHANNELS 8\n\n\nWhere the last number is the number of textures used.\n\n\n\n\n\n\ndefine Z_MESH_ATTRIBUTES UV3 UV4\n\n\nWhere the values following Z_MESH_ATTRIBUTES is the mesh properties that are accessed.  Available values are \nUV0, UV2, UV3, UV4, COLOR, TANGENT\n.\n\n\n\n\n\n\nIn addition, shaders must be named with the suffix \n_SfSrc\n (ex, \nMySimpleBlendShader_SfSrc.shader\n).  This lets \nPolybrush\n know that this shader requires some post-processing.\n\n\nThe \nShader Settings / Path\n must be set to \nHidden\n (ex, \nHidden/MyShader\n).  \nPolybrush\n will automatically detect this and remove the \nHidden\n part from the path when compiling the new shader.  If you're having issues with black triangles on a mesh, check that the shader has \nHidden/\n in it's path.\n\n\nHere is a basic 4 texture blend shader in ShaderForge.  This shader blends the 4 textures using \nmesh.uv3\n as input.  Note the comments \nZ_TEXTURE_CHANNELS 4\n on the \nMain\n node and \nZ_MESH_ATTRIBUTES UV3\n on the \nVector4 Property\n node.\n\n\n\n\nAccessing Vector4 UVs\n\n\nDue to a limitation in ShaderForge, accessing UV data as \nVector4\n types requires some extra work.  To read a UV as a \nfixed4\n in graph language, first\n\n\n\n\nCreate a \nUV Coord.\n node matching the channel you would like to read blend information from.\n\n\nCreate a \nVector4 Property\n node named \nTEMP_CHANNEL_UV0\n (or \nTEMP_CHANNEL_UV1\n, or \nTEMP_CHANNEL_UV2\n etc, where the final number matches the channel specified in the \nUV Coord.\n node).\n\n\nCreate an \nAppend\n node and connect the \nuv.u\n, \nuv.v\n, \nTEMP_CHANNEL_0.z\n and \nTEMP_CHANNEL_0.w\n.  It is important that you not swizzle the \nUV Coord.\n input.\n\n\nUse the \nAppend\n output as though it was the \nuv0\n channel.\n\n\n\n\n\n\nIn shader code, the texture coordinates are always zero indexed, where in Unity you may be used to seeing the \nuv0\n channel called simply \nuv\n and the \nuv1\n channel called \nmesh.uv2\n.\n\n\nIf you're confused, here's a graph mapping the \nmesh\n property to it's shader counterpart.\n\n\n\n\n\n\n\n\nMesh\n\n\nShader\n\n\nVector4 Node Name\n\n\n\n\n\n\n\n\n\n\nmesh.uv\n or \nmesh.uv2\n\n\nuv0\n\n\nTEMP_CHANNEL_UV0\n\n\n\n\n\n\nmesh.uv2\n\n\nuv1\n\n\nTEMP_CHANNEL_UV1\n\n\n\n\n\n\nmesh.uv3\n\n\nuv2\n\n\nTEMP_CHANNEL_UV2\n\n\n\n\n\n\nmesh.uv4\n\n\nuv3\n\n\nTEMP_CHANNEL_UV3\n\n\n\n\n\n\n\n\nF.A.Q.\n\n\nTexture Palette Doesn't Match What's Painted\n\n\nMake sure that the properties are listed in the correct order (they will be matched sequentially to the \nZ_MESH_ATTRIBUTES\n list).", 
            "title": "Writing Texture Blend Shaders"
        }, 
        {
            "location": "/shaders/#defining-channel-data-in-shader-code-legacy", 
            "text": "If your shader simply blends between textures using normalized values set in a mesh array, you can use this method to make the shader compatible with Polybrush.   Somewhere in the shader you must define how many textures are used:  define Z_TEXTURE_CHANNELS 8  Somewhere in the shader the mesh attributes used must be defined:  define Z_MESH_ATTRIBUTES COLOR UV UV3 \n    The order in which the mesh attributes are defined also tells  Polybrush  which  Texture  inputs belong to which attribute.  For example,  define Z_MESH_ATTRIBUTES UV0 UV3 UV4  tells  Polybrush  that the first 4 textures should map to the 4 values in each vertex  uv0  property, the next 4 textures belong to  uv3 , and so on.   The available mesh attributes values are  UV0, UV2, UV3, UV4, COLOR, TANGENT .  Each value should only be used at most once.  Polybrush  accesses these statements by searching the shader source, so they may be either provided in a comment or defined.  #define Z_TEXTURE_CHANNELS 8\n// is the same as\n// define Z_TEXTURE_CHANNELS 8  Here's what this could look like in shader code (boring bits omitted)  Properties\n{\n    _MainTex (\"Texture\", 2D) = \"white\" {}\n    _Texture1 (\"Texture 1\", 2D) = \"white\" {}\n    _Texture2 (\"Texture 2\", 2D) = \"white\" {}\n    _Texture3 (\"Texture 3\", 2D) = \"white\" {}\n    _Texture4 (\"Texture 4\", 2D) = \"white\" {}\n    _Texture5 (\"Texture 5\", 2D) = \"white\" {}\n}\nSubShader\n{\n    Pass\n    {\n        // Tell Polybrush that this shader supports 6 texture channels (Texture, Texture 1, so on)\n        #define Z_TEXTURE_CHANNELS 6\n\n        // Tells Polybrush that the shader expects data in the uv3 and uv4 channels\n        // (4 components in uv3, 2 in uv4)\n        #define Z_MESH_ATTRIBUTES UV3 UV4\n\n        struct appdata\n        {\n            // local position\n            float4 vertex : POSITION;\n            // the texture coordinate\n            float2 uv : TEXCOORD0;\n            // float2 uv1 : TEXCOORD1; // not used (this would be mesh.uv2)\n            // mesh.uv3 data\n            float4 uv2 : TEXCOORD2;\n            // mesh.uv4 data\n            float4 uv3 : TEXCOORD3;\n        }\n\n        etc...  In this example  Polybrush  will show 6 textures in the palette and map each texture's strength to  mesh.uv.xyzw  and  mesh.uv3.xy  respectively.  Check out the shader  z_UnlitTextureBlend.shader  for a simple working example.", 
            "title": "Defining Channel Data in Shader Code (Legacy)"
        }, 
        {
            "location": "/shaders/#metadata-file", 
            "text": "Polybrush  can store fine-grained instructions for interpreting mesh data in the form of a metadata file.  A metadata file is composed of a shader reference (pointing to the shader it describes) and a list of  z_AttributeLayout  entries.  Each entry contains all the necessary information about how a value is used in a shader for  Polybrush  to work with.  When  Polybrush  loads a material into  Texture Mode  it will first search for an accompanying  ShaderName.pbs.json  file, then try to fall back on the Legacy method (searching for  Z_DEFINE_MESH_ATTRIBUTES  in shader source).  Creating MetaData  To create a new  Polybrush  metadata file:   Select the shader you want to work with.  Right click (Option click Mac) the Shader and select  Create/Polybrush/Shader MetaData .   By default  Polybrush  creates the new file using the name of the selected shader, placing it in the same directory.  This is where  Polybrush  will look for metadata.  To specify a different name or path, in the shader add the following comment:  // Z_SHADER_METADATA MyMetaDataFolder/SomeOtherName.pbs.json  The path provided after  Z_SHADER_METADATA  is relative to the directory of the shader.  Editing MetaData  Mercifully, you do not have to write this metadata by hand (though you can if you'd like to).     Property Target  - The shader property that this attribute will affect.    More complex interactions may not map to a single property, so this field may be either the name of a property, or a simple description.  If the string provided to this field matches a  2D  property in the shader,  Polybrush  will load the material's texture matching this property name.   If it does not match a texture property, this string will be shown as the preview in the texture selection well.    Channel  - The mesh channel that this attribute will draw from.   Index  - Which component of the channel this attribute receives data from.  Range  - The range (x is min, y is max) that this attribute will operate in.  Group  - Attributes with matching groups will affect one another when applied.  Use  No Mask  to mark that this attribute will always operate independently.   How Polybrush Applies Texture Data  When a texture is selected in  Texture Mode ,  Polybrush  sets a new target value for each attribute matching the selected attributes  group .  The selected attribute has its target value set to  Range .max, while all other attributes in the group are set to their  Range .min value.   Polybrush  then applies this new mix of attribute values to the mesh, taking into account brush strength and falloff.  A Simple Example  Say you have a shader with 5 textures; a base texture and 4 blend textures.  This shader reads texture blending information from the  mesh.color  channel.  The final fragment color is built using the following formula:  // sample the texture\nfixed4 col1 = tex2D(_MainTex, i.uv);\nfixed4 col2 = tex2D(_Texture1, i.uv) * i.color.y;\nfixed4 col3 = tex2D(_Texture2, i.uv) * i.color.z;\nfixed4 col4 = tex2D(_Texture3, i.uv) * i.color.w;\n\nfloat snowMix = i.color.x * ((cnoise(i.uv * _SnowTiling) + 1) * .5);\nfixed4 final_color = lerp(lerp(lerp(col1, col2, i.color.y), col3, i.color.z), col4, i.color.w);\nfinal_color = lerp(final_color, _SnowColor, snowMix);  In this case you'll want  Polybrush  to show 5 entries in the  Texture Palette : 4 textures and \"Snow\".  This means the metadata needs 5 entries.  All the texture properties are related, meaning when one value is set to maximum strength the others should be set to minimum strength.  To do this, create each for these attributes with the same group.  The attribute values are set like so:     Property  Channel  Component  Range  Group      _MainTex  Color  G  { 1, 0 }  0    _Texture1  Color  G  { 0, 1 }  0    _Texture2  Color  B  { 0, 1 }  0    _Texture3  Color  A  { 0, 1 }  0    Snow  Color  R  { 0, 1 }  No Mask     You may have noticed that  _MainTex  and  _Texture1   share a common channel.  The reason is that  _MainTex  is special in that it does not map it's strength to a single attribute, rather, its strength is determined by the lack of strength in the other texture channels.    To accomplish this, we set  _MainTex  to use the  Color  channel and register it to the  G  field.  However, instead of setting the strength from 0 to 1 it is from 1 to 0.  That means when  Polybrush  applies  _MainTex  at full strength the  Color.G  field will be 0, and the  Color.B  and  Color.A  fields will also be 0 (since their min values are 0).  Snow is also a special case.  Since it is a generated effect in the shader it does not map to a texture property.   Polybrush  will display the name \"Snow\" for this value.  By setting the group to \"No Mask\" we're telling  Polybrush  that this value should be modified independent of all other attributes.  That means when you're applying Snow at full strength all other attributes will remain unaffected.", 
            "title": "MetaData File"
        }, 
        {
            "location": "/shaders/#with-shaderforge", 
            "text": "", 
            "title": "With ShaderForge"
        }, 
        {
            "location": "/shaders/#post-processing", 
            "text": "Shaders built with  ShaderForge  require some additional work to be compatible with  Polybrush .  Fortunately through some post-processing this process is extremely simple.  In short,  Polybrush  will automatically listen for changes to any shader with the suffix  _SfSrc , then make some changes to the source code and compile a new shader right next to it (omitting the suffix so you aren't confused).  For example, if you have  MyNeatoShaderForgeShader_SfSrc.shader  it will be compiled and renamed to  MyNeatoShaderForgeShader.shader .  Use this shader in your game (not the suffixed one!).  Similar to writing shader code, you need to define how many textures are used and what mesh attributes data is provided in.  Usually this means as a comment on one of the nodes (right click and select \"Edit Comment\").  It is required that all ShaderForge shaders have the following two lines present in node comments:    define Z_TEXTURE_CHANNELS 8  Where the last number is the number of textures used.    define Z_MESH_ATTRIBUTES UV3 UV4  Where the values following Z_MESH_ATTRIBUTES is the mesh properties that are accessed.  Available values are  UV0, UV2, UV3, UV4, COLOR, TANGENT .    In addition, shaders must be named with the suffix  _SfSrc  (ex,  MySimpleBlendShader_SfSrc.shader ).  This lets  Polybrush  know that this shader requires some post-processing.  The  Shader Settings / Path  must be set to  Hidden  (ex,  Hidden/MyShader ).   Polybrush  will automatically detect this and remove the  Hidden  part from the path when compiling the new shader.  If you're having issues with black triangles on a mesh, check that the shader has  Hidden/  in it's path.  Here is a basic 4 texture blend shader in ShaderForge.  This shader blends the 4 textures using  mesh.uv3  as input.  Note the comments  Z_TEXTURE_CHANNELS 4  on the  Main  node and  Z_MESH_ATTRIBUTES UV3  on the  Vector4 Property  node.", 
            "title": "Post-Processing"
        }, 
        {
            "location": "/shaders/#accessing-vector4-uvs", 
            "text": "Due to a limitation in ShaderForge, accessing UV data as  Vector4  types requires some extra work.  To read a UV as a  fixed4  in graph language, first   Create a  UV Coord.  node matching the channel you would like to read blend information from.  Create a  Vector4 Property  node named  TEMP_CHANNEL_UV0  (or  TEMP_CHANNEL_UV1 , or  TEMP_CHANNEL_UV2  etc, where the final number matches the channel specified in the  UV Coord.  node).  Create an  Append  node and connect the  uv.u ,  uv.v ,  TEMP_CHANNEL_0.z  and  TEMP_CHANNEL_0.w .  It is important that you not swizzle the  UV Coord.  input.  Use the  Append  output as though it was the  uv0  channel.    In shader code, the texture coordinates are always zero indexed, where in Unity you may be used to seeing the  uv0  channel called simply  uv  and the  uv1  channel called  mesh.uv2 .  If you're confused, here's a graph mapping the  mesh  property to it's shader counterpart.     Mesh  Shader  Vector4 Node Name      mesh.uv  or  mesh.uv2  uv0  TEMP_CHANNEL_UV0    mesh.uv2  uv1  TEMP_CHANNEL_UV1    mesh.uv3  uv2  TEMP_CHANNEL_UV2    mesh.uv4  uv3  TEMP_CHANNEL_UV3", 
            "title": "Accessing Vector4 UVs"
        }, 
        {
            "location": "/shaders/#faq", 
            "text": "", 
            "title": "F.A.Q."
        }, 
        {
            "location": "/shaders/#texture-palette-doesnt-match-whats-painted", 
            "text": "Make sure that the properties are listed in the correct order (they will be matched sequentially to the  Z_MESH_ATTRIBUTES  list).", 
            "title": "Texture Palette Doesn't Match What's Painted"
        }, 
        {
            "location": "/settings/", 
            "text": "Rebuild Normals\n\n\nWhen \nRebuild Normals\n is enabled \nPolybrush\n will automatically recalculate the mesh normals after a brush has been applied.\n\n\nRebuild Mesh Collider\n\n\nWhen \nRebuild Mesh Collider\n is enabled \nPolybrush\n will automatically recalculate the mesh collider source after a brush has been applied.  If the target object does not have a Mesh Collider this setting is ignored.\n\n\nLock Brush to First\n\n\nIf \nLock Brush to First\n is enabled \nPolybrush\n will not let the brush affect any other mesh after a drag has been started.  This is useful for situations where a mesh may be partially obscured by another.  For example, where a beach meets the water:  You may want to sculpt the beach terrain without affecting the water, and by default \nPolybrush\n will apply to any selected mesh that the mouse is hovering.\n\n\nIgnore Unselected\n\n\nWhen \nIgnore Unselected\n is enabled the mouse will always show a brush when hovering a selected mesh, even if another unselected mesh is obscuring it's view.\n\n\n\n\nIf \nIgnore Unselected\n is off, the mouse will always register the first GameObject it is hovering, which may not be in the current selection.\n\n\n\n\nWhen a brush stroke is applied it will always ignore unselected meshes until the drag is complete.\n\n\nAnchor Brush Settings\n\n\nWhen enabled the \nBrush Settings\n GUI items will stay locked to the top of the window regardless of where the scroll bar is.\n\n\nAdditional Vertex Streams\n\n\nAdditional Vertex Streams is a new feature in Unity that allows an extra mesh to be attached to the \nMeshRenderer\n that will override any duplicate attributes.\n\n\nThis means that instead of Polybrush having to copy and instantiate a copy of any edited mesh, a partial \nadditionalVertexStream\n mesh can instead be appended and edited.\n\n\nNote that once enabled any mesh that has been modified with \nadditionalVertexStreams\n will always make use of the stream mesh.  Ie, toggling this feauture off will \"lock\" any edited mesh attributes in.  To reset these meshes, simply find the \nAdditional Vertex Streams\n component and click the \nDelete\n button.  This will clear any changes applied by \nadditionalVertexStreams\n.\n\n\nHide Wireframe\n\n\nWhen this option is enabled \nPolybrush\n will hide the wireframe of the currently hovering mesh object.\n\n\nBrush Handle Color\n\n\nThis sets the color of the falloff disc in the Scene view, as well as the vertex billboards inside the falloff zone.\n\n\nBrush Gradient\n\n\nBrush Gradient\n sets the colors used for the vertex sprites outside the falloff zone, from most affected to least.", 
            "title": "Settings"
        }, 
        {
            "location": "/settings/#rebuild-normals", 
            "text": "When  Rebuild Normals  is enabled  Polybrush  will automatically recalculate the mesh normals after a brush has been applied.", 
            "title": "Rebuild Normals"
        }, 
        {
            "location": "/settings/#rebuild-mesh-collider", 
            "text": "When  Rebuild Mesh Collider  is enabled  Polybrush  will automatically recalculate the mesh collider source after a brush has been applied.  If the target object does not have a Mesh Collider this setting is ignored.", 
            "title": "Rebuild Mesh Collider"
        }, 
        {
            "location": "/settings/#lock-brush-to-first", 
            "text": "If  Lock Brush to First  is enabled  Polybrush  will not let the brush affect any other mesh after a drag has been started.  This is useful for situations where a mesh may be partially obscured by another.  For example, where a beach meets the water:  You may want to sculpt the beach terrain without affecting the water, and by default  Polybrush  will apply to any selected mesh that the mouse is hovering.", 
            "title": "Lock Brush to First"
        }, 
        {
            "location": "/settings/#ignore-unselected", 
            "text": "When  Ignore Unselected  is enabled the mouse will always show a brush when hovering a selected mesh, even if another unselected mesh is obscuring it's view.   If  Ignore Unselected  is off, the mouse will always register the first GameObject it is hovering, which may not be in the current selection.   When a brush stroke is applied it will always ignore unselected meshes until the drag is complete.", 
            "title": "Ignore Unselected"
        }, 
        {
            "location": "/settings/#anchor-brush-settings", 
            "text": "When enabled the  Brush Settings  GUI items will stay locked to the top of the window regardless of where the scroll bar is.", 
            "title": "Anchor Brush Settings"
        }, 
        {
            "location": "/settings/#additional-vertex-streams", 
            "text": "Additional Vertex Streams is a new feature in Unity that allows an extra mesh to be attached to the  MeshRenderer  that will override any duplicate attributes.  This means that instead of Polybrush having to copy and instantiate a copy of any edited mesh, a partial  additionalVertexStream  mesh can instead be appended and edited.  Note that once enabled any mesh that has been modified with  additionalVertexStreams  will always make use of the stream mesh.  Ie, toggling this feauture off will \"lock\" any edited mesh attributes in.  To reset these meshes, simply find the  Additional Vertex Streams  component and click the  Delete  button.  This will clear any changes applied by  additionalVertexStreams .", 
            "title": "Additional Vertex Streams"
        }, 
        {
            "location": "/settings/#hide-wireframe", 
            "text": "When this option is enabled  Polybrush  will hide the wireframe of the currently hovering mesh object.", 
            "title": "Hide Wireframe"
        }, 
        {
            "location": "/settings/#brush-handle-color", 
            "text": "This sets the color of the falloff disc in the Scene view, as well as the vertex billboards inside the falloff zone.", 
            "title": "Brush Handle Color"
        }, 
        {
            "location": "/settings/#brush-gradient", 
            "text": "Brush Gradient  sets the colors used for the vertex sprites outside the falloff zone, from most affected to least.", 
            "title": "Brush Gradient"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Frequently asked questions and troubleshooting tips when working with \nPolybrush\n.\n\n\nBrush Isn't Applying / Can't See Brush Gizmo\n\n\n\n\n\n\nFirst, make sure you have a \nBrush Mode\n selected (click any of the buttons in the top toolbar except settings).\n\n\nThis is usually the cause, since \nPolybrush\n automatically pops out of \nBrush Mode\ns when the Unity tool is changed.\n\n\n\n\n\n\n\n\n\n\n\n\nCheck that you have a GameObject selected, and that the selected GameObject has a valid mesh.  \nPolybrush\n only applies brushes to the current selection, and must have a mesh with a vertex count greater than 3.\n\n\n\n\n\n\nPolybrush\n does not work on Unity Terrain objects.  Make sure the GameObject is a mesh.\n\n\n\n\n\n\nReset the \nBrush Settings\n by deleting the \nProCore/Polybrush/Brush Settings\n folder.  Note that this will clear any saved brush presets, so use this only as a last resort!\n\n\n\n\n\n\nSave Mesh as Asset\n\n\nPolybrush\n adds a new button to \nMeshFilter\n components that reference an instanced mesh (a mesh that isn't saved in the project).  The \"Save to Asset\" button will create a new mesh asset in your project and point the \nMeshFilter\n to that object.  This allows the mesh to be used in Prefabs.\n\n\nPrefabs aren't working\n\n\nSee \nSave Mesh as Asset\n.\n\n\nColors or Textures not Painting\n\n\nVertex colors and texture blending both require special shaders to work.  By default, Unity's Standard shader does not include support for either of these modes.  Fortunately, \nPolybrush\n includes a number of prebuilt Materials that work well with these modes:\n\n\n\n\n\n\n\n\nName\n\n\nMode\n\n\nDescription\n\n\nPath\n\n\n\n\n\n\n\n\n\n\nDiffuse Vertex Color\n\n\nColor\n\n\nA Legacy Diffuse shader with support for a texture, normal map, and vertex colors.\n\n\nProCore/Polybrush/Materials/Diffuse Vertex Color\n\n\n\n\n\n\nStandard Texture Blend\n\n\nTexture\n\n\nA PBR enabled material with support for blending up to 12 different textures.\n\n\nProCore/Polybrush/Materials/Standard Texture Blend\n\n\n\n\n\n\nStandard Texture Blend Bump\n\n\nTexture\n\n\nA PBR enabled material with support for blending up to 4 different textures with normal maps.\n\n\nProCore/Polybrush/Materials/Standard Texture Blend Bump\n\n\n\n\n\n\nStandard Vertex Color\n\n\nColor\n\n\nThis material behaves similarly to the Standard shader, but with support for painting vertex colors.\n\n\nProCore/Polybrush/Materials/Standard Vertex Color\n\n\n\n\n\n\nTriPlanar Texture Blend\n\n\nTexture\n\n\nA PBR enabled material with support for blending up to 4 textures and automatically projects UV coordinates.\n\n\nProCore/Polybrush/Materials/TriPlanar Texture Blend\n\n\n\n\n\n\nTriPlanar Texture Blend Legacy\n\n\nTexture\n\n\nA Blinn-Phong lighting pipeline (legacy) material with support for blending up to 4 textures and automatically projects UV coordinates.\n\n\nProCore/Polybrush/Materials/TriPlanar Texture Blend Legacy\n\n\n\n\n\n\nUnlit Texture Blend\n\n\nTexture\n\n\nA simple unlit material with support for blending up to 6 textures.\n\n\nProCore/Polybrush/Materials/Unlit Texture Blend\n\n\n\n\n\n\n\n\nTextures not Painting (with valid shader)\n\n\nOccasionally Unity will refuse to update mesh values after a lightmap bake.  To fix, open \nWindow \n Lighting \n Scene\n and click the arrow on the Build button in the bottom right corner then select \"Clear Baked Data\".\n\n\nKeyboard Shortcuts Not Working\n\n\nUnity can sometimes not register keyboard shortcuts when a package is first imported.  The solution to open the Menu item and manually select the shortcut.  You should only need to do this once ever.\n\n\nLighting Seams or Vertex Color / Textures Bleeding\n\n\nFor vertex colors and textures to have hard seams (meaning no blending at vertices between different colored faces) a mesh must have hard edges.  Most 3D modeling applications call this some variation on \"Smooth\" or \"Hard\" edges.\n\n\nThis can also affect lighting - if an edge is not smoothed then using the \nPush/Pull\n or \nSmooth\n brush tools can exacerbate a lighting seam.\n\n\nBlack Faces / Triangles on Mesh\n\n\n\n\nThis can happen when a Texture Blending material is in use, but no texture channels have been applied to the mesh.  To fix, open the \nTexture Blend Mode\n panel and select a texture, then apply the brush to the affected areas.\n\n\nIn some cases you may also need to use \nVertex Color Mode\n to paint the entire mesh with a \nWhite\n color.", 
            "title": "Troubleshooting / F.A.Q."
        }, 
        {
            "location": "/troubleshooting/#brush-isnt-applying-cant-see-brush-gizmo", 
            "text": "First, make sure you have a  Brush Mode  selected (click any of the buttons in the top toolbar except settings).  This is usually the cause, since  Polybrush  automatically pops out of  Brush Mode s when the Unity tool is changed.       Check that you have a GameObject selected, and that the selected GameObject has a valid mesh.   Polybrush  only applies brushes to the current selection, and must have a mesh with a vertex count greater than 3.    Polybrush  does not work on Unity Terrain objects.  Make sure the GameObject is a mesh.    Reset the  Brush Settings  by deleting the  ProCore/Polybrush/Brush Settings  folder.  Note that this will clear any saved brush presets, so use this only as a last resort!", 
            "title": "Brush Isn't Applying / Can't See Brush Gizmo"
        }, 
        {
            "location": "/troubleshooting/#save-mesh-as-asset", 
            "text": "Polybrush  adds a new button to  MeshFilter  components that reference an instanced mesh (a mesh that isn't saved in the project).  The \"Save to Asset\" button will create a new mesh asset in your project and point the  MeshFilter  to that object.  This allows the mesh to be used in Prefabs.", 
            "title": "Save Mesh as Asset"
        }, 
        {
            "location": "/troubleshooting/#prefabs-arent-working", 
            "text": "See  Save Mesh as Asset .", 
            "title": "Prefabs aren't working"
        }, 
        {
            "location": "/troubleshooting/#colors-or-textures-not-painting", 
            "text": "Vertex colors and texture blending both require special shaders to work.  By default, Unity's Standard shader does not include support for either of these modes.  Fortunately,  Polybrush  includes a number of prebuilt Materials that work well with these modes:     Name  Mode  Description  Path      Diffuse Vertex Color  Color  A Legacy Diffuse shader with support for a texture, normal map, and vertex colors.  ProCore/Polybrush/Materials/Diffuse Vertex Color    Standard Texture Blend  Texture  A PBR enabled material with support for blending up to 12 different textures.  ProCore/Polybrush/Materials/Standard Texture Blend    Standard Texture Blend Bump  Texture  A PBR enabled material with support for blending up to 4 different textures with normal maps.  ProCore/Polybrush/Materials/Standard Texture Blend Bump    Standard Vertex Color  Color  This material behaves similarly to the Standard shader, but with support for painting vertex colors.  ProCore/Polybrush/Materials/Standard Vertex Color    TriPlanar Texture Blend  Texture  A PBR enabled material with support for blending up to 4 textures and automatically projects UV coordinates.  ProCore/Polybrush/Materials/TriPlanar Texture Blend    TriPlanar Texture Blend Legacy  Texture  A Blinn-Phong lighting pipeline (legacy) material with support for blending up to 4 textures and automatically projects UV coordinates.  ProCore/Polybrush/Materials/TriPlanar Texture Blend Legacy    Unlit Texture Blend  Texture  A simple unlit material with support for blending up to 6 textures.  ProCore/Polybrush/Materials/Unlit Texture Blend", 
            "title": "Colors or Textures not Painting"
        }, 
        {
            "location": "/troubleshooting/#textures-not-painting-with-valid-shader", 
            "text": "Occasionally Unity will refuse to update mesh values after a lightmap bake.  To fix, open  Window   Lighting   Scene  and click the arrow on the Build button in the bottom right corner then select \"Clear Baked Data\".", 
            "title": "Textures not Painting (with valid shader)"
        }, 
        {
            "location": "/troubleshooting/#keyboard-shortcuts-not-working", 
            "text": "Unity can sometimes not register keyboard shortcuts when a package is first imported.  The solution to open the Menu item and manually select the shortcut.  You should only need to do this once ever.", 
            "title": "Keyboard Shortcuts Not Working"
        }, 
        {
            "location": "/troubleshooting/#lighting-seams-or-vertex-color-textures-bleeding", 
            "text": "For vertex colors and textures to have hard seams (meaning no blending at vertices between different colored faces) a mesh must have hard edges.  Most 3D modeling applications call this some variation on \"Smooth\" or \"Hard\" edges.  This can also affect lighting - if an edge is not smoothed then using the  Push/Pull  or  Smooth  brush tools can exacerbate a lighting seam.", 
            "title": "Lighting Seams or Vertex Color / Textures Bleeding"
        }, 
        {
            "location": "/troubleshooting/#black-faces-triangles-on-mesh", 
            "text": "This can happen when a Texture Blending material is in use, but no texture channels have been applied to the mesh.  To fix, open the  Texture Blend Mode  panel and select a texture, then apply the brush to the affected areas.  In some cases you may also need to use  Vertex Color Mode  to paint the entire mesh with a  White  color.", 
            "title": "Black Faces / Triangles on Mesh"
        }
    ]
}